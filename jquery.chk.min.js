(function ($) {
  "use strict";
  $.fn.chk = function () {
    this._checkSum = null;
    this.up = function (unitElement, limit, func) {
      return this._controller(
        unitElement,
        limit,
        func,
        this._upOverflow,
        this._countUp,
        this._wrapUp
      );
    };
    this._upOverflow = function (limit) {
      return 0;
    };
    this._countUp = function (unit, check) {
      if (check) {
        return unit + 1;
      }
      return unit;
    };
    this._wrapUp = function (unit, limit, overflow) {
      if (unit >= limit) {
        return overflow;
      }
      return unit;
    };
    this.down = function (unitElement, limit, func) {
      return this._controller(
        unitElement,
        limit,
        func,
        this._downOverflow,
        this._countDown,
        this._wrapDown
      );
    };
    this._controller = function (
      unitElement,
      limit,
      func,
      overflowFunc,
      countFunc,
      wrapFunc
    ) {
      var overflow = overflowFunc(limit);
      var oldHand = this._hand(unitElement);
      var newHand = wrapFunc(
        countFunc(oldHand, this._check()),
        limit,
        overflow
      );
      this._callback(func, newHand, oldHand);
      this._print(unitElement, this.zeroPadLimit(limit)(newHand));
      this._setCheckSum(newHand, overflow);
      return this;
    };
    this._downOverflow = function (limit) {
      if (limit <= 0) {
        return 0;
      }
      return limit - 1;
    };
    this._countDown = function (unit, check) {
      if (check) {
        return unit - 1;
      }
      return unit;
    };
    this._wrapDown = function (unit, limit, overflow) {
      if (unit < 0) {
        return overflow;
      }
      return unit;
    };
    this._callback = function (func, newHand, oldHand) {
      if (typeof func == "function" && newHand != oldHand) {
        try {
          func();
        } catch (e) {}
      }
    };
    this._check = function () {
      var checkSum = this._checkSum;
      return (
        typeof checkSum === undefined || checkSum === null || checkSum === 0
      );
    };
    this._setCheckSum = function (newHand, overflow) {
      this._checkSum += newHand - overflow;
    };
    this.zeroPad = function (length) {
      return function (newHand) {
        return ("0".repeat(length) + newHand).slice(-length);
      };
    };
    this.zeroPadLimit = function (limit) {
      return this.zeroPad(this._limitLength(limit));
    };
    this._limitLength = function (limit) {
      return Math.ceil(Math.log10(limit));
    };
    this._print = function (unitElement, displayHand) {
      unitElement.html(displayHand);
    };
    this._hand = function (unitElement) {
      return parseFloat(unitElement.text());
    };
    return this;
  };
})(jQuery);
